// <auto-generated />
using System;
using Charts.Domain.ChartAggregate;
using Charts.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Charts.Infrastructure.Migrations
{
    [DbContext(typeof(ChartContext))]
    partial class ChartContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:chart.basechart", "'basechart', 'chart', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:chart.field", "'field', 'chart', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:chart.fieldgroup", "'fieldgroup', 'chart', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:chart.mapper", "'mapper', 'chart', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:dashboard.container", "'container', 'dashboard', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:dashboard.dashboard", "'dashboard', 'dashboard', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Charts.Domain.ChartAggregate.BaseChart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "basechart")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "chart")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("ChartType");

                    b.Property<int?>("DataSourceId");

                    b.HasKey("Id");

                    b.ToTable("Basecharts","chart");

                    b.HasDiscriminator<int>("ChartType");
                });

            modelBuilder.Entity("Charts.Domain.DashboardAggregate.ChartContainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChartId");

                    b.Property<int?>("ContainerId");

                    b.Property<int>("ResponsiveSizeId");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ContainerId");

                    b.HasIndex("ResponsiveSizeId");

                    b.ToTable("ChartContainers","dashboard");
                });

            modelBuilder.Entity("Charts.Domain.DashboardAggregate.Container", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "container")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "dashboard")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<bool>("BorderVisible");

                    b.Property<int?>("ContainerId");

                    b.Property<int>("DashboardId");

                    b.Property<int>("ResponsiveSizeId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("ContainerId");

                    b.HasIndex("DashboardId");

                    b.HasIndex("ResponsiveSizeId");

                    b.ToTable("Containers","dashboard");
                });

            modelBuilder.Entity("Charts.Domain.DashboardAggregate.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "dashboard")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "dashboard")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.HasKey("Id");

                    b.ToTable("Dashboards","dashboard");
                });

            modelBuilder.Entity("Charts.Domain.DashboardAggregate.ResponsiveSize", b =>
                {
                    b.Property<int>("Id")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("ResponsiveSize","dashboard");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Large"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Medium"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Small"
                        });
                });

            modelBuilder.Entity("Charts.Domain.Fields.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "field")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "chart")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("DataSourceNameField");

                    b.Property<int>("FieldGroupId");

                    b.Property<string>("StaticValue");

                    b.HasKey("Id");

                    b.HasIndex("FieldGroupId");

                    b.ToTable("Fields","chart");
                });

            modelBuilder.Entity("Charts.Domain.Fields.FieldGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "fieldgroup")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "chart")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("ChartId");

                    b.Property<string>("GroupName");

                    b.HasKey("Id");

                    b.HasIndex("ChartId");

                    b.ToTable("FieldGroups","chart");
                });

            modelBuilder.Entity("Charts.Domain.Fields.FieldType", b =>
                {
                    b.Property<int>("Id")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("FieldTypes","chart");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "System.Int32"
                        },
                        new
                        {
                            Id = 2,
                            Name = "System.Boolean"
                        },
                        new
                        {
                            Id = 3,
                            Name = "System.Decimal"
                        },
                        new
                        {
                            Id = 4,
                            Name = "System.String"
                        });
                });

            modelBuilder.Entity("Charts.Domain.Fields.ValueMapperPersisted", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "mapper")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "chart")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Destination");

                    b.Property<int?>("FieldId");

                    b.Property<string>("Origin");

                    b.Property<int?>("OriginFieldTypeId");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("OriginFieldTypeId");

                    b.ToTable("Mappers","chart");
                });

            modelBuilder.Entity("Charts.Domain.ChartAggregate.GaugeChart", b =>
                {
                    b.HasBaseType("Charts.Domain.ChartAggregate.BaseChart");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("Charts.Domain.ChartAggregate.PieChart", b =>
                {
                    b.HasBaseType("Charts.Domain.ChartAggregate.BaseChart");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Charts.Domain.ChartAggregate.StatusChart", b =>
                {
                    b.HasBaseType("Charts.Domain.ChartAggregate.BaseChart");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Charts.Domain.ChartAggregate.TextChart", b =>
                {
                    b.HasBaseType("Charts.Domain.ChartAggregate.BaseChart");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("Charts.Domain.DashboardAggregate.ChartContainer", b =>
                {
                    b.HasOne("Charts.Domain.DashboardAggregate.Container")
                        .WithMany("ChartContainers")
                        .HasForeignKey("ContainerId");

                    b.HasOne("Charts.Domain.DashboardAggregate.ResponsiveSize", "ResponsiveSize")
                        .WithMany()
                        .HasForeignKey("ResponsiveSizeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Charts.Domain.DashboardAggregate.ElementSize", "Size", b1 =>
                        {
                            b1.Property<int>("ChartContainerId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int>("Value")
                                .HasColumnName("Size");

                            b1.HasKey("ChartContainerId");

                            b1.ToTable("ChartContainers","dashboard");

                            b1.HasOne("Charts.Domain.DashboardAggregate.ChartContainer")
                                .WithOne("Size")
                                .HasForeignKey("Charts.Domain.DashboardAggregate.ElementSize", "ChartContainerId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Charts.Domain.DashboardAggregate.PixelSize", "MaxSize", b1 =>
                        {
                            b1.Property<int>("ChartContainerId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int?>("Value")
                                .HasColumnName("MaxSize");

                            b1.HasKey("ChartContainerId");

                            b1.ToTable("ChartContainers","dashboard");

                            b1.HasOne("Charts.Domain.DashboardAggregate.ChartContainer")
                                .WithOne("MaxSize")
                                .HasForeignKey("Charts.Domain.DashboardAggregate.PixelSize", "ChartContainerId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Charts.Domain.DashboardAggregate.PixelSize", "MinSize", b1 =>
                        {
                            b1.Property<int>("ChartContainerId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int?>("Value")
                                .HasColumnName("MinSize");

                            b1.HasKey("ChartContainerId");

                            b1.ToTable("ChartContainers","dashboard");

                            b1.HasOne("Charts.Domain.DashboardAggregate.ChartContainer")
                                .WithOne("MinSize")
                                .HasForeignKey("Charts.Domain.DashboardAggregate.PixelSize", "ChartContainerId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Charts.Domain.DashboardAggregate.Container", b =>
                {
                    b.HasOne("Charts.Domain.DashboardAggregate.Container")
                        .WithMany("ChildContainers")
                        .HasForeignKey("ContainerId");

                    b.HasOne("Charts.Domain.DashboardAggregate.Dashboard")
                        .WithMany("Containers")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Charts.Domain.DashboardAggregate.ResponsiveSize", "ResponsiveSize")
                        .WithMany()
                        .HasForeignKey("ResponsiveSizeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Charts.Domain.DashboardAggregate.ElementSize", "Size", b1 =>
                        {
                            b1.Property<int>("ContainerId");

                            b1.Property<int>("Value")
                                .HasColumnName("Size");

                            b1.HasKey("ContainerId");

                            b1.ToTable("Containers","dashboard");

                            b1.HasOne("Charts.Domain.DashboardAggregate.Container")
                                .WithOne("Size")
                                .HasForeignKey("Charts.Domain.DashboardAggregate.ElementSize", "ContainerId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Charts.Domain.DashboardAggregate.PixelSize", "MaxSize", b1 =>
                        {
                            b1.Property<int>("ContainerId");

                            b1.Property<int?>("Value")
                                .HasColumnName("MaxSize");

                            b1.HasKey("ContainerId");

                            b1.ToTable("Containers","dashboard");

                            b1.HasOne("Charts.Domain.DashboardAggregate.Container")
                                .WithOne("MaxSize")
                                .HasForeignKey("Charts.Domain.DashboardAggregate.PixelSize", "ContainerId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Charts.Domain.DashboardAggregate.PixelSize", "MinSize", b1 =>
                        {
                            b1.Property<int>("ContainerId");

                            b1.Property<int?>("Value")
                                .HasColumnName("MinSize");

                            b1.HasKey("ContainerId");

                            b1.ToTable("Containers","dashboard");

                            b1.HasOne("Charts.Domain.DashboardAggregate.Container")
                                .WithOne("MinSize")
                                .HasForeignKey("Charts.Domain.DashboardAggregate.PixelSize", "ContainerId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Charts.Domain.Fields.Field", b =>
                {
                    b.HasOne("Charts.Domain.Fields.FieldGroup")
                        .WithMany("Fields")
                        .HasForeignKey("FieldGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Charts.Domain.Fields.FieldName", "Name", b1 =>
                        {
                            b1.Property<int>("FieldId");

                            b1.Property<string>("Name");

                            b1.Property<int?>("TypeId");

                            b1.HasKey("FieldId");

                            b1.HasIndex("TypeId");

                            b1.ToTable("Fields","chart");

                            b1.HasOne("Charts.Domain.Fields.Field")
                                .WithOne("Name")
                                .HasForeignKey("Charts.Domain.Fields.FieldName", "FieldId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.HasOne("Charts.Domain.Fields.FieldType", "Type")
                                .WithMany()
                                .HasForeignKey("TypeId");
                        });
                });

            modelBuilder.Entity("Charts.Domain.Fields.FieldGroup", b =>
                {
                    b.HasOne("Charts.Domain.ChartAggregate.BaseChart")
                        .WithMany("FieldGroups")
                        .HasForeignKey("ChartId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Charts.Domain.Fields.ValueMapperPersisted", b =>
                {
                    b.HasOne("Charts.Domain.Fields.Field")
                        .WithMany("Mappers")
                        .HasForeignKey("FieldId");

                    b.HasOne("Charts.Domain.Fields.FieldType", "OriginFieldType")
                        .WithMany()
                        .HasForeignKey("OriginFieldTypeId");
                });
#pragma warning restore 612, 618
        }
    }
}
